class Sheep {
	def Sheep() {
		this.image := resources["sheep"]
		this.width = this.image.getWidth()
		this.height = this.image.getHeight()
		this.x = love.graphics.getWidth() / 2.0f - this.width / 2.0f
		this.reset()
		this.nullPlatform := Platform(-1, this.x, this.y, 0.0f)
		this.currentPlatformIndex = -1
		this.platform := this.nullPlatform
		this.horizontalSpeed = 120.0f
	}

	def reset() {
		this.yspeed = 0.0f
		this.isJumping = false
		this.y = love.graphics.getHeight() - this.height / 1.1f
		this.platform := this.nullPlatform
	}

	def draw() {
		love.graphics.draw(this.image, this.x, this.y)
	}

	def jump() {
		if (this.isJumping == false) {
			this.yspeed = -600.0f
			this.isJumping = true
		}
	}

	def update(delta) {
		// If on a platform.
		if (!this.isJumping) {
			this.x = this.platform.x
			this.y = this.platform.y
			return
		}

		// Vertical movement
		this.y = this.y + this.yspeed * delta
		this.yspeed = this.yspeed + 980.7f * delta
		if (this.y + this.height > love.graphics.getHeight()) {
			this.reset()
		}

		// Move left/right
		if (love.joystick.isDown(0, "left")) {
			this.x = this.x - this.horizontalSpeed * delta
		}
		else if (love.joystick.isDown(0, "right")) {
			this.x = this.x + this.horizontalSpeed * delta
		}
		if (this.x < 0.0f) {
			this.x = 0.0f
		}
		else if (this.x + this.width > love.graphics.getWidth()) {
			this.x = love.graphics.getWidth() - this.width
		}

		// If it's falling, allow to re-catch the old platform.
		if (this.yspeed > 10.0f) {
			this.platform := this.nullPlatform
		}

		// Check collision
		for (platform : platforms) {
			// Don't allow re-catching current platform.
			if (this.platform.index != platform.index) {
				if (this.x < platform.x + platform.width && this.x + this.width > platform.x && this.y < platform.y + platform.height && this.height + this.y > platform.y) {
				    this.isJumping = false
				    this.platform := platform
				}
			}
		}
	}

	def joystickpressed(button) {
		if (button == "a" || button == "b" || button == "up") {
			this.jump()
		}
	}
}